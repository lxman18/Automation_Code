package Flower;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.text.SimpleDateFormat;
import java.time.Duration;
import java.util.*;
import java.util.regex.*;

import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.*;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.*;

public class test {

    // Utility to extract first numeric value from a string
    public static double extractFirstNumber(String input) {
        try {
            if (input == null || input.isEmpty()) return 0;
            Matcher m = Pattern.compile("\\b\\d+(\\.\\d+)?\\b").matcher(input);
            if (m.find()) {
                return Double.parseDouble(m.group());
            }
        } catch (Exception ignored) {}
        return 0;
    }

    public static void main(String[] args) throws Exception {
        WebDriver driver = new ChromeDriver();
        driver.manage().window().maximize();
        driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(30));

        try {
            // Read Excel file
            String filePath = ".\\input-data\\Flower.xlsx";
            FileInputStream file = new FileInputStream(filePath);
            Workbook workbook = new XSSFWorkbook(file);
            Sheet sheet = workbook.getSheet("Sheet2"); // Explicitly use Sheet1
            int rowCount = sheet.getPhysicalNumberOfRows();

            List<String> inputPid = new ArrayList<>(), inputCity = new ArrayList<>(),
                    inputName = new ArrayList<>(), inputSize = new ArrayList<>(),
                    urls = new ArrayList<>();

            // Read input data, filter for FNP products
            for (int i = 1; i < rowCount; i++) {
                Row row = sheet.getRow(i);
                if (row == null) continue;

                String pid = row.getCell(0) != null ? row.getCell(0).toString().trim() : "NA";
                String city = row.getCell(1) != null ? row.getCell(1).toString().trim() : "NA";
                String name = row.getCell(2) != null ? row.getCell(2).toString().trim() : "NA";
                String size = row.getCell(3) != null ? row.getCell(3).toString().trim() : "NA";
                String url = row.getCell(4) != null ? row.getCell(4).toString().trim() : "NA";

                // Only process FNP products
                if (name.toLowerCase().startsWith("fnp")) {
                    inputPid.add(pid);
                    inputCity.add(city);
                    inputName.add(name);
                    inputSize.add(size);
                    urls.add(url);

                    //System.out.println("Row " + i + ": PID=" + pid + " | City=" + city + " | Name=" + name + " | Size=" + size + " | URL=" + url);
                    System.out.println(pid);
                    System.out.println(city);
                    System.out.println(name);
                    System.out.println(size);
                    System.out.println(url);
                }
            }

            file.close();

            if (inputPid.isEmpty()) {
                System.out.println("No FNP products found in the input file.");
                return;
            }

            // Prepare output
            Workbook outputWorkbook = new XSSFWorkbook();
            Sheet outputSheet = outputWorkbook.createSheet("Results");

            String[] headers = {
                "InputPid", "InputCity", "InputName", "InputSize", "ConvertedInputSize", "URL",
                "Name", "MRP", "SP", "UOM", "ExtractedUOMQty", "Multiplier", "Availability", "Offer"
            };

            Row headerRow = outputSheet.createRow(0);
            for (int i = 0; i < headers.length; i++) {
                headerRow.createCell(i).setCellValue(headers[i]);
            }

            int rowIndex = 1;
            WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(15));

            for (int i = 0; i < urls.size(); i++) {
                String pid = inputPid.get(i);
                String city = inputCity.get(i);
                String name = inputName.get(i);
                String size = inputSize.get(i);
                String url = urls.get(i);

                String prodName = "NA", mrp = "NA", sp = "NA", uom = "NA", offer = "NA";
                double multiplier = 0, convertedSize = 0, uomVal = 0;
                String availability = "NA";

                try {
                    if (url.equalsIgnoreCase("NA") || url.isEmpty()) {
                        System.out.println("Skipping invalid URL for PID: " + pid);
                        throw new Exception("Invalid URL");
                    }

                    driver.get(url);
                    Thread.sleep(3000); // Increased wait for page load

                    // Set pincode for FNP
                    try {
                        WebElement pinInput = wait.until(ExpectedConditions.visibilityOfElementLocated(
                            By.xpath("//input[@placeholder='Enter Receiver’s pincode, location, area']")));
                        pinInput.clear();
                        pinInput.sendKeys("122018");
                        WebElement pinSubmit = wait.until(ExpectedConditions.elementToBeClickable(
                            By.xpath("//span[@class='w-[calc(100%-24px)] px-8']")));
                        pinSubmit.click();
                        Thread.sleep(2000); // Wait for pincode update
                        System.out.println("FNP: Pincode set to 122018 for PID: " + pid);
                    } catch (Exception e) {
                        System.out.println("FNP: Pincode update failed for PID");
                    }

                    // Scrape FNP data
                    // Name
                    try {
                        prodName = wait.until(ExpectedConditions.visibilityOfElementLocated(
                            By.xpath("//h1[@id='productName']"))).getText().trim();
                    } catch (Exception e) {
                        System.out.println("FNP: Name not found for PID: " );
                    }

                    // SP
                    try {
                        WebElement spElement = wait.until(ExpectedConditions.visibilityOfElementLocated(
                            By.xpath("//p[@id='odometer']")));
                        sp = spElement.getText().replace("₹", "").replace(",", "").trim();
                    } catch (Exception e) {
                        System.out.println("FNP: SP not found for PID: ");
                    }

                    // MRP
                    try {
                        WebElement mrpElement = wait.until(ExpectedConditions.visibilityOfElementLocated(
                            By.xpath("//p[@class='text-14 md:text-20 font-400 text-grey-500']//del")));
                        mrp = mrpElement.getText().replace("₹", "").replace(",", "").trim();
                    } catch (Exception e) {
                        mrp = sp;
                        System.out.println("FNP: MRP not found, using SP for PID: ");
                    }

                    // UOM
                    try {
                        WebElement uomElement = wait.until(ExpectedConditions.visibilityOfElementLocated(
                            By.xpath("//div[@class='product-description']")));
                        uom = uomElement.getText().trim();
                    } catch (Exception e) {
                        System.out.println("FNP: UOM not found for PID: " );
                    }

                    // Availability
                    try {
                        availability = driver.findElements(By.xpath("//button[contains(text(),'Add to Cart')]")).isEmpty() ? "0" : "1";
                    } catch (Exception e) {
                        System.out.println("FNP: Availability check failed for PID: ");
                    }

                    // Offer
                    try {
                        if (!sp.equals(mrp)) {
                            WebElement offerElement = wait.until(ExpectedConditions.visibilityOfElementLocated(
                                By.xpath("//p[contains(@class,'text-green')]")));
                            offer = offerElement.getText().trim();
                        }
                    } catch (Exception e) {
                        offer = "NA";
                        System.out.println("FNP: Offer not found for PID: " );
                    }

                    // Extract Converted Size
                    convertedSize = extractFirstNumber(size);
                    if (convertedSize == 0 && size.toLowerCase().contains("unit")) {
                        convertedSize = 1; // Default to 1 for "1 unit"
                    } else if (size.toLowerCase().contains("pack")) {
                        convertedSize = extractFirstNumber(size.replaceAll("[^0-9]", ""));
                    }

                    // Extract UOM number
                    uomVal = extractFirstNumber(uom);
                    if (uomVal == 0 && !uom.equals("NA")) {
                        uomVal = 1; // Default to 1 if no number found but UOM exists
                    }

                    // Calculate Multiplier
                    if (uomVal != 0) {
                        multiplier = convertedSize / uomVal;
                        multiplier = Double.parseDouble(String.format("%.2f", multiplier));
                    }

                    
                    System.out.println(pid);
                    System.out.println(prodName);
                    System.out.println(mrp);
                    System.out.println(sp);
                    System.out.println(uom);
                    System.out.println(convertedSize);
                    System.out.println(multiplier);
                    System.out.println(availability);
                    System.out.println(offer);
                    
                    
                    
                    System.out.println("--------------------------------------------------------------------------------");

                } catch (Exception e) {
                    System.out.println("Error processing URL: " + url );
                    System.out.println("Exception: ");
                    System.out.println("--------------------------------------------------------------------------------");
                }

                // Write to output
                Row resultRow = outputSheet.createRow(rowIndex++);
                resultRow.createCell(0).setCellValue(pid);
                resultRow.createCell(1).setCellValue(city);
                resultRow.createCell(2).setCellValue(name);
                resultRow.createCell(3).setCellValue(size);
                resultRow.createCell(4).setCellValue(convertedSize);
                resultRow.createCell(5).setCellValue(url);
                resultRow.createCell(6).setCellValue(prodName);
                resultRow.createCell(7).setCellValue(mrp);
                resultRow.createCell(8).setCellValue(sp);
                resultRow.createCell(9).setCellValue(uom);
                resultRow.createCell(10).setCellValue(uomVal);
                resultRow.createCell(11).setCellValue(multiplier);
                resultRow.createCell(12).setCellValue(availability);
                resultRow.createCell(13).setCellValue(offer);
            }

            // Save output file
            String timestamp = new SimpleDateFormat("ddMMyy_HHmmss").format(new Date());
            String outputPath = ".\\Output\\FNP_outputData_" + timestamp + ".xlsx";
            FileOutputStream fos = new FileOutputStream(outputPath);
            outputWorkbook.write(fos);
            fos.close();
            outputWorkbook.close();

            System.out.println("Output saved to: " + outputPath);

        } catch (Exception e) {
            System.out.println("Main exception: ");
            e.printStackTrace();
        } finally {
            driver.quit();
        }
    }
}
